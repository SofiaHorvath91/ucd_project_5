Check results
=============

E501:15:80:line too long (85 > 79 characters)
E501:27:80:line too long (87 > 79 characters)
E501:52:80:line too long (125 > 79 characters)
E501:61:80:line too long (138 > 79 characters)
E501:81:80:line too long (93 > 79 characters)
E501:82:80:line too long (101 > 79 characters)

Code
=============
from decimal import Decimal

from django.core.files.uploadedfile import SimpleUploadedFile
from django.test import TestCase
from .models import Book, Category


# Unit tests for Category Model
class CategoryModelTest(TestCase):
    @classmethod
    def setUpTestData(cls):
        Category.objects.create(name='Crime-Thriller',
                                friendly_name='Crime-Thriller')

    def create_category(self, name='Crime-Thriller', friendly_name='Crime-Thriller'):
        return Category.objects.create(name=name, friendly_name=friendly_name)

    def test_create_category(self):
        category = self.create_category()
        self.assertTrue(isinstance(category, Category))
        self.assertEqual(category.name, 'Crime-Thriller')
        self.assertEqual(str(category), 'Crime-Thriller')

    def test_name_max_length(self):
        category = Category.objects.get(id=1)
        max_length_name = category._meta.get_field('name').max_length
        max_length_friendly_name = category._meta.get_field('friendly_name').max_length
        self.assertEqual(max_length_name, 254)
        self.assertLess(len(category.name), 254)
        self.assertEqual(max_length_friendly_name, 254)
        self.assertLess(len(category.friendly_name), 254)

    def test_get_friendly_name(self):
        category = Category.objects.get(id=1)
        friendly_name = category.get_friendly_name()
        self.assertEqual(friendly_name, 'Crime-Thriller')
        self.assertEqual(category.friendly_name, 'Crime-Thriller')

    def test_verbose_name_plural(self):
        category = Category.objects.get(id=1)
        verbose_name_plural = category._meta.verbose_name_plural
        self.assertEquals(verbose_name_plural, "Categories")


# Unit tests for Book Model
class BookModelTest(TestCase):
    @classmethod
    def setUpTestData(cls):
        Category.objects.create(name='SciFi-Fantasy-Horror',
                                friendly_name='SciFi-Fantasy-Horror')

        Book.objects.create(image='https://d1w7fb2mkkr3kw.cloudfront.net/assets/images/book/mid/9780/5535/9780553573404.jpg',
                            name='A Game of Thrones',
                            author='George R. R. Martin',
                            format='Paperback',
                            book_depository_stars=4.50,
                            price=10.77,
                            isbn='9780553573404',
                            category=Category.objects.get(id=1),
                            img_paths=SimpleUploadedFile(name='test_image.jpg',
                                                         content=open('static/img/dataset/SciFi-Fantasy-Horror/0000067.jpg', 'rb').read())
                            )

    def test_fields_max_length(self):
        book = Book.objects.get(id=1)
        max_length_image = book._meta.get_field('image').max_length
        max_length_name = book._meta.get_field('name').max_length
        max_length_author = book._meta.get_field('author').max_length
        max_length_format = book._meta.get_field('format').max_length
        max_length_isbn = book._meta.get_field('isbn').max_length
        self.assertEqual(max_length_image, 1024)
        self.assertEqual(max_length_name, 254)
        self.assertEqual(max_length_author, 254)
        self.assertEqual(max_length_format, 254)
        self.assertEqual(max_length_isbn, 254)

    def test_fields_max_digits_decimals(self):
        book = Book.objects.get(id=1)
        max_digits_price = book._meta.get_field('price').max_digits
        decimal_places_price = book._meta.get_field('price').decimal_places
        max_digits_book_depo_stars = book._meta.get_field('book_depository_stars').max_digits
        decimal_places_book_depo_stars = book._meta.get_field('book_depository_stars').decimal_places
        self.assertEqual(max_digits_price, 6)
        self.assertEqual(decimal_places_price, 2)
        self.assertEqual(max_digits_book_depo_stars, 6)
        self.assertEqual(decimal_places_book_depo_stars, 2)

    def test_text_fields(self):
        book = Book.objects.get(id=1)
        self.assertEqual(book.name, 'A Game of Thrones')
        self.assertTrue(isinstance(book.name, str))
        self.assertLess(len(book.name), 254)
        self.assertEqual(book.author, 'George R. R. Martin')
        self.assertTrue(isinstance(book.author, str))
        self.assertLess(len(book.author), 254)
        self.assertEqual(book.format, 'Paperback')
        self.assertTrue(isinstance(book.format, str))
        self.assertLess(len(book.format), 254)
        self.assertEqual(book.isbn, '9780553573404')
        self.assertTrue(isinstance(book.isbn, str))
        self.assertLess(len(book.isbn), 254)

    def test_decimal_fields(self):
        book = Book.objects.get(id=1)
        self.assertTrue(isinstance(book.book_depository_stars, Decimal))
        self.assertTrue(isinstance(book.price, Decimal))
        self.assertEqual(book.book_depository_stars, Decimal('4.50'))
        self.assertEqual(book.price, Decimal('10.77'))

    def test_image_fields(self):
        book = Book.objects.get(id=1)
        self.assertLess(len(book.image), 1024)
        self.assertEqual(hasattr(book.img_paths, 'url'), True)
        self.assertEqual(hasattr(book.img_paths, 'path'), True)
        self.assertEqual(book.img_paths.name.split('_')[0], 'test')
        self.assertEqual(book.img_paths.name.split('_')[1], 'image')
        self.assertEqual(book.img_paths.name.split('.')[1], 'jpg')

    def test_book_category(self):
        book = Book.objects.get(id=1)
        self.assertEqual(book.category.name, 'SciFi-Fantasy-Horror')
        self.assertEqual(book.category.friendly_name, 'SciFi-Fantasy-Horror')
        self.assertTrue(isinstance(book.category, Category))
        self.assertEqual(str(book.category), 'SciFi-Fantasy-Horror')
