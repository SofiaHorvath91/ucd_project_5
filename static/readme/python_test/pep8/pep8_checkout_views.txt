Check results
=============

E501:2:80:line too long (87 > 79 characters)
E501:82:80:line too long (85 > 79 characters)
E501:90:80:line too long (83 > 79 characters)
E501:98:80:line too long (80 > 79 characters)
E501:101:80:line too long (85 > 79 characters)

Code
=============
from django.contrib.auth.decorators import login_required
from django.shortcuts import render, redirect, reverse, get_object_or_404, HttpResponse
from django.views.decorators.http import require_POST
from django.contrib import messages
from django.conf import settings

from .forms import OrderForm
from .models import Order, OrderLineItem

from books.models import Book
from profiles.models import Profile
from profiles.forms import UserProfileForm
from shopping_bag.contexts import my_bag_contents

import stripe
import json


# Handle Strip payment intent
@require_POST
def cache_checkout_data(request):
    try:
        pid = request.POST.get('client_secret').split('_secret')[0]
        stripe.api_key = settings.STRIPE_SECRET_KEY
        stripe.PaymentIntent.modify(pid, metadata={
            'bag': json.dumps(request.session.get('bag', {})),
            'save_info': request.POST.get('save_info'),
            'username': request.user,
        })
        return HttpResponse(status=200)
    except Exception as e:
        messages.error(request, 'Sorry, your payment cannot be \
            processed right now. Please try again later.')
        return HttpResponse(content=e, status=400)


# Checkout Page (checkout.html)
# => Page Aim :
# Page to handle order completion / payment checkout
@login_required
def checking_out(request):
    # Get Stripe keys from settings
    stripe_public_key = settings.STRIPE_PUBLIC_KEY
    stripe_secret_key = settings.STRIPE_SECRET_KEY

    # Handling order registration and payment checkout
    if request.method == 'POST':
        bag = request.session.get('bag', {})

        # Validate order form
        form_data = {
            'full_name': request.POST['full_name'],
            'email': request.POST['email'],
            'phone': request.POST['phone'],
            'country': request.POST['country'],
            'postcode': request.POST['postcode'],
            'city': request.POST['city'],
            'street1': request.POST['street1'],
            'street2': request.POST['street2'],
            'county': request.POST['county'],
        }
        order_form = OrderForm(form_data)

        # If order form is valid, create order and proceed with checkout
        if order_form.is_valid():
            order = order_form.save(commit=False)
            pid = request.POST.get('client_secret').split('_secret')[0]
            order.stripe_pid = pid
            order.bag = json.dumps(bag)
            order.save()
            for item_id, quantity in bag.items():
                try:
                    book = Book.objects.get(id=item_id)
                    order_line_item = OrderLineItem(
                        order=order,
                        book=book,
                        quantity=quantity,
                    )
                    order_line_item.save()
                except Book.DoesNotExist:
                    messages.error(request, (
                        "One of the books in your bag wasn't found in our database. "
                        "Please call us for assistance!")
                    )
                    order.delete()
                    return redirect(reverse('view_my_bag'))

            # Save delivery info to the user's profile
            request.session['save_info'] = 'save-info' in request.POST
            return redirect(reverse('checkout_success', args=[order.order_number]))
        else:
            messages.error(request, 'There was an error with your form. \
                Please double check your information.')
    else:
        # Handling empty bag
        bag = request.session.get('bag', {})
        if not bag:
            messages.error(request, "There's nothing in your bag at the moment")
            return redirect(reverse('books'))

        # Get shopping bag content from shopping_back/contexts.py and set Stripe info
        current_bag = my_bag_contents(request)
        total = current_bag['grand_total']
        stripe_total = round(total * 100)
        stripe.api_key = stripe_secret_key
        intent = stripe.PaymentIntent.create(
            amount=stripe_total,
            currency=settings.STRIPE_CURRENCY,
        )

        # Get delivery information from current user's profile
        if request.user.is_authenticated:
            try:
                profile = Profile.objects.get(user=request.user)
                order_form = OrderForm(initial={
                    'full_name': profile.user.get_full_name(),
                    'email': profile.user.email,
                    'phone': profile.basic_phone,
                    'country': profile.basic_country,
                    'postcode': profile.basic_postcode,
                    'city': profile.basic_city,
                    'street1': profile.basic_street1,
                    'street2': profile.basic_street2,
                    'county': profile.basic_county,
                })
            except Profile.DoesNotExist:
                order_form = OrderForm()
        else:
            order_form = OrderForm()

    # Validate Stripe public key
    if not stripe_public_key:
        messages.warning(request, 'Stripe public key is missing. \
            Did you forget to set it in your environment?')

    template = 'checkout/checkout.html'
    context = {
        'order_form': order_form,
        'stripe_public_key': stripe_public_key,
        'client_secret': intent.client_secret,
    }

    return render(request, template, context)


# Checkout Success Page (checkout_success.html)
# => Page Aim :
# Page to confirm successful order completion / payment checkout
@login_required
def checkout_success(request, order_number):
    # Handling successful checkout
    save_info = request.session.get('save_info')
    order = get_object_or_404(Order, order_number=order_number)

    if request.user.is_authenticated:
        profile = Profile.objects.get(user=request.user)
        # Attach user profile to the order
        order.profile = profile
        order.save()

        # Save the delivery information to user profile
        if save_info:
            profile_data = {
                'basic_phone': order.phone,
                'basic_country': order.country,
                'basic_postcode': order.postcode,
                'basic_city': order.city,
                'basic_street1': order.street1,
                'basic_street2': order.street2,
                'basic_county': order.county,
            }
            user_profile_form = UserProfileForm(profile_data, instance=profile)
            if user_profile_form.is_valid():
                user_profile_form.save()

    messages.success(request, f'Order successfully processed! \
        Your order number is {order_number}.')

    if 'bag' in request.session:
        del request.session['bag']

    template = 'checkout/checkout_success.html'
    context = {
        'order': order,
    }

    return render(request, template, context)
